import java.io.File;
import java.io.FileNotFoundException;
import java.math.BigInteger;
import java.util.Scanner;

class Fibbonacci{
	
public static void main(String[] args) throws FileNotFoundException {
	 	
		Scanner in = new Scanner (System.in);
		long y = in.nextLong();
        long yStorage = 44;
     	final long start = System.nanoTime();
     	in.close();
     	
        if (y > 44) {
        
        	longCalculationfib(yStorage);
        	
        	for (int i = 45; i <= y; i++) {
            System.out.println(theBigFib(i));
        	}
        }
        
        if (y <= 44) {
        	longCalculationfib(y);
        }
    //  System.out.println(theBigFib(35));  Takes way too long
        final long end = System.nanoTime();
        System.out.println("This program took " + ((end - start) / 1000000000) + " second(s) to run.");
    }
public static void longCalculationfib (long y) {
	int previousMin = 1;
	int previousMax = 1;
	
	System.out.println(previousMin);
	System.out.println(previousMax);
	
	for (int z = 1; z <= y; z++) {
		int fib = previousMin + previousMax;
		previousMin = previousMax;
		previousMax = fib;
		System.out.println(fib);
			
	}	
}
public static BigInteger theBigFib(int b) throws FileNotFoundException {
        BigInteger[] a = new BigInteger[100000];
        a = arrayfiller();
        
        if(a[b] != null) {
            return a[b];
        }

        a[b] = theBigFib(b - 1).add(theBigFib(b - 2));
        return a[b];
    }

public static BigInteger[] arrayfiller () throws FileNotFoundException {
	
	File file = new File ("C:\\Users\\gshamburger\\Desktop\\fib.txt");
	
	BigInteger[] a = new BigInteger[100000];
	int[] c = new int[45];
	Scanner fibtext = new Scanner (file);
	int x = 0;
	String values = null;
	long parsedvalue;
	
	while (fibtext.hasNextLine()) {
		values = fibtext.nextLine();
		parsedvalue = Long.parseLong(values);
		c[x] = (int) parsedvalue;
		System.out.println(a[x]);
		x++;
		}
	
	return a;
	
}
}
